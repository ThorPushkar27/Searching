// Time Limit Exceeded approach .
// My thought approach.
// Time complexity check kar lena.


class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        int n = matrix[0].size();
        int row_start=0;
        int row_end = m-1;
        int col_start =0;
        int col_end = n-1;
        int s = matrix[row_start][col_start];
        int e = matrix[row_start][col_end];
        while(row_start<=row_end){
            if(target> e){
                s=matrix[row_start+1][col_start];
                e = matrix[row_start+1][col_end];
            }
        }
        while(s<=e){
            int mid= s+(e-s)/2;
            if(matrix[row_start][mid]==target){
                return true;
            }
            else if(matrix[row_start][mid]> target){
                e = matrix[row_start][mid-1];
            }
            else{
                s = matrix[row_start][mid+1];
            }
        }
        return false;
        
    }
};



// End pe khade hoke ya toh down nhi toh left jaana hai.
//Time Complexity =O(M+N) because in worst case I can move from complete down to complete left.

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        int n = matrix[0].size();
        int rs=0;
        int re=m-1;
        int cs=0;
        int ce= n-1;
        while(rs<= re && cs<=ce){
            if(matrix[rs][ce]==target){
                return true;
            
            }
            else if(matrix[rs][ce]<target){
                rs=rs+1;
                
            }
            else{
                ce=ce-1;
            }
        }
        return false;
        
    }
};

// Time Complexiy = O(log(m*n))
// Binary Search Approach thinking array is 1D.
// Using formula to get row and column.


class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        int n = matrix[0].size();
        int s =0;
        int e = (m*n-1);
        while(s<=e){
            int mid = s+(e-s)/2;
            int r = mid/n;
            int c= mid%n;
            if(matrix[r][c]== target){
                return true;
            }
            else if(matrix[r][c]>target){
                e=mid-1;
            }
            else {
                s= mid+1;
            }
        }
        return false;
    }
};
