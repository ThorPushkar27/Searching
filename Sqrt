//O(n) approach

class Solution {
public:
    int mySqrt(int x) {
        if(x<=1) return x;
        long long i =1;
        long long sq= i*i;
        while(x>=sq){
            i++;
            sq=i*i;
        }
        return int(i-1);
        
    }
};

// Bit Easy approach.
// Linear Search    O(root(x))

class Solution {
public:
    int mySqrt(int x) {
        long long ans=1;
        for(long long int i =0; i*i<=x; i++){
            if(i*i<=x) ans= i;
        }
        return int (ans);
    }
   
};

// Binary Search approach
// Time Complexity O(log(n/2))

class Solution {
public:
    int mySqrt(int x) {
        if(x<1) return x;
        int s=1;
        int e=x/2; // e=root(x) karne se bhi chal jayega aur mera search space bhi kaam ho jayega.
        long long int ans=1;

        while(s<=e){
            long long int mid = s+(e-s)/2;
            if(mid*mid<= x){
                ans= mid;
                s= mid+1;

            }
            else{
                e=mid-1;
            }

        }
        return int(ans);
    }
   
};
